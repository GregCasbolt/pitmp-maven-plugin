#!/bin/sh
################################################################################
printUsage()
{
   echo "Usage: $ScriptName [-h | -clean | -v <version> | -pv <pitest_version>]"
}

################################################################################
help()
{
   printUsage

   echo
   echo "Compile, install locally and run automatic tests, or clean all test files"
   echo "generated by previous executions."
   echo "Should be run from the directory containing the file pom.xml"
   echo "Options:"
   echo "-h: this help."
   echo "-clean: clean all files generated by a previous execution."
   echo "-v <version>: version of PitMP to be tested."
   echo "    Default value: the version in the file pom.xml."
   echo "-pv <pitest_version>: version of PITest to be tested."
   echo "    Default value: the version in the file pom.xml."

   exit 0
}

################################################################################
usage()
{
   printUsage
   exit 1
}

################################################################################
# commandline analysis

ScriptName=`basename "$0"`
currentDir=`pwd`

execOption="run"
pitestVersion=
pitmpVersion=
testDir=
while test ! "X$1" = "X"
do
   if test "$1" = "-h"
   then
      help
   elif test "$1" = "-clean"
   then
      execOption="clean"
   elif test "$1" = "-v"
   then
      if test "X$2" = "X"
      then
         echo "Error: -v option requires an argument"
         usage
      else
         pitmpVersion="$2"
         shift
      fi
   elif test "$1" = "-pv"
   then
      if test "X$2" = "X"
      then
         echo "Error: -pv option requires an argument"
         usage
      else
         pitestVersion="$2"
         shift
      fi
   else
      usage
   fi
   shift
done

################################################################################
fileExtension="pitmp"
pomFile="pom.xml"
pomNameBase="$pomFile.$fileExtension"
defaultPom="$pomNameBase.noconf.template"
confList="noconf conf1"

if test "$execOption" = "run"
then
   if test "X$pitmpVersion" = "X"
   then
      pitmpVersion=`grep '<version>' ../../$pomFile | head -n 1 | \
         sed -e "s/ *<version>//" -e "s/<\/version>//"`
   fi
   if test "X$pitestVersion" = "X"
   then
      pitestVersion=`grep '<version>' ../../$pomFile | head -n 2 | tail -n 1 | \
         sed -e "s/ *<version>//" -e "s/<\/version>//"`
   fi
   
   fileName="run_tests_"`date +%Y%m%d_%Hh%M`
   testResFile="$fileName.test_res"
   traceFile="$fileName.test_traces"
   
   for theConf in $confList
   do
      thePom="$pomNameBase.$theConf"
      pomTemplate="$thePom.template"
   
      echo "########################################" >>$traceFile 2>&1
      echo "# $thePom" >>$traceFile 2>&1
      echo "########################################" >>$traceFile 2>&1
   
      if test -f $pomTemplate
      then
         # generate pom file
         sed -e "s/##PITEST_VERSION##/$pitestVersion/" \
             -e "s/##PITMP_VERSION##/$pitmpVersion/" $pomTemplate > $pomFile
   
         # silent build
         echo "------------------------------------------------------------" >> $traceFile 2>&1
         echo "---- mvn clean install" >> $traceFile 2>&1
         echo "------------------------------------------------------------" >> $traceFile 2>&1
         mvn clean install >> $traceFile 2>&1
      
         echo "------------------------------------------------------------" >> $traceFile 2>&1
         echo "---- mvn -e pitmp:run" >> $traceFile 2>&1
         echo "------------------------------------------------------------" >> $traceFile 2>&1
         tracedDate=`date +%T`
         echo "######## $tracedDate" >>$traceFile 2>&1
         mvn -e pitmp:run >> $traceFile 2>&1
         tracedDate=`date +%T`
         echo "######## $tracedDate" >>$traceFile 2>&1
      
         # check the result
         check1Res=`grep '@Before' $traceFile`
         check2Res=`grep '@After' $traceFile`
         runRes=`grep '\[INFO\] BUILD FAILURE' $traceFile`
         if test "X$runRes" = "X" && test "X$check1Res" != "X" && test "X$check2Res" != "X"
         then
            echo "######## $thePom: OK" 2>&1 | tee -a $testResFile
            echo "######## $thePom: OK" >> $traceFile 2>&1
            echo "########################################" >> $traceFile 2>&1
         else
            echo "######## $thePom: FAILED" 2>&1 | tee -a $testResFile
            echo "######## $thePom: FAILED" >> $traceFile 2>&1
            echo "########################################" >> $traceFile 2>&1
         fi
      else
         tracedDate=`date +%T`
         echo "######## $tracedDate" >> $traceFile 2>&1
         echo "######## $thePom: ERROR (missing $pomTemplate)" 2>&1 | tee -a $testResFile
         echo "######## $thePom: ERROR (missing $pomTemplate)" >> $traceFile 2>&1
         echo "########################################" >> $traceFile 2>&1
      fi
   done
else
   # generate pom file
   sed -e "s/##PITMP_VERSION##/1.1.5/" $defaultPom > $pomFile
   mvn clean
   rm -f run_tests_*.* pom.xml
fi
exit 0
